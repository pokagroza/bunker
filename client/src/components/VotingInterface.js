import React, { useState, useEffect } from 'react';
import './Character.css';

const VotingInterface = ({ votingInfo, onVote, canVote }) => {
  const [hasVoted, setHasVoted] = useState(false);
  const [timeLeft, setTimeLeft] = useState(60); // 60 —Å–µ–∫—É–Ω–¥ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ

  useEffect(() => {
    setHasVoted(false);
    setTimeLeft(60);
    
    const timer = setInterval(() => {
      setTimeLeft(prev => {
        if (prev <= 1) {
          clearInterval(timer);
          return 0;
        }
        return prev - 1;
      });
    }, 1000);

    return () => clearInterval(timer);
  }, [votingInfo]);

  const handleVote = (vote) => {
    if (canVote && !hasVoted && timeLeft > 0) {
      onVote(vote);
      setHasVoted(true);
    }
  };

  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  return (
    <div className="voting-interface">
      <div className="voting-container">
        <div className="voting-header">
          <h3>ÔøΩ –≠–ö–°–¢–†–ï–ù–ù–û–ï –ì–û–õ–û–°–û–í–ê–ù–ò–ï üö®</h3>
          <div className="voting-target">
            <span className="target-label">–ö–ê–ù–î–ò–î–ê–¢ –ù–ê –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï:</span>
            <span className="target-name">{votingInfo.targetPlayerName}</span>
          </div>
          
          {timeLeft > 0 && (
            <div className="voting-timer">
              <span style={{
                color: timeLeft <= 10 ? 'var(--bunker-warning)' : 'var(--bunker-glow)',
                fontSize: '1.5rem',
                fontFamily: 'Orbitron, monospace',
                fontWeight: 'bold'
              }}>
                ‚è±Ô∏è {formatTime(timeLeft)}
              </span>
            </div>
          )}
        </div>

        <div className="voting-question">
          <p>
            –î–æ–ª–∂–µ–Ω –ª–∏ <strong>{votingInfo.targetPlayerName}</strong> –ø–æ–∫–∏–Ω—É—Ç—å –±—É–Ω–∫–µ—Ä 
            –∏ –æ—Å—Ç–∞—Ç—å—Å—è —Å–Ω–∞—Ä—É–∂–∏ –≤ –∑–æ–Ω–µ –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ—ã?
          </p>
          <p className="voting-rule">
            ‚öñÔ∏è –î–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –±–æ–ª—å—à–µ –ø–æ–ª–æ–≤–∏–Ω—ã –≥–æ–ª–æ—Å–æ–≤ "–ó–ê"
          </p>
        </div>

        {canVote && !hasVoted && timeLeft > 0 && (
          <div className="voting-buttons">
            <button
              className="btn btn-danger vote-btn"
              onClick={() => handleVote('yes')}
            >
              üëç –ó–ê –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï
            </button>
            <button
              className="btn btn-success vote-btn"
              onClick={() => handleVote('no')}
            >
              üëé –ü–†–û–¢–ò–í –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø
            </button>
          </div>
        )}

        {hasVoted && (
          <div className="vote-confirmation">
            ‚úÖ –í–ê–® –ì–û–õ–û–° –£–ß–¢–ï–ù! –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π –¥—Ä—É–≥–∏—Ö –∂–∏—Ç–µ–ª–µ–π –±—É–Ω–∫–µ—Ä–∞...
          </div>
        )}

        {!canVote && (
          <div className="vote-disabled">
            ‚è∏Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏ 
            {votingInfo.targetPlayerId === 'currentPlayerId' ? ' (–≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º –Ω–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ)' : ' (–≤—ã –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –±—É–Ω–∫–µ—Ä–∞)'}
          </div>
        )}

        {timeLeft === 0 && !hasVoted && canVote && (
          <div className="vote-disabled">
            ‚è∞ –í–†–ï–ú–Ø –ì–û–õ–û–°–û–í–ê–ù–ò–Ø –ò–°–¢–ï–ö–õ–û
          </div>
        )}

        <div className="voting-progress">
          <div className="progress-info">
            <span>–ü–†–û–ì–û–õ–û–°–û–í–ê–õ–û: {votingInfo.votesCount || 0} –∏–∑ {votingInfo.alivePlayers?.length || 0}</span>
          </div>
          <div className="progress-bar">
            <div 
              className="progress-fill"
              style={{ 
                width: `${((votingInfo.votesCount || 0) / (votingInfo.alivePlayers?.length || 1)) * 100}%` 
              }}
            />
          </div>
        </div>

        <div className="voting-players">
          <h4>üë• –ñ–ò–¢–ï–õ–ò –ë–£–ù–ö–ï–†–ê:</h4>
          <div className="voters-list">
            {votingInfo.alivePlayers?.map((player) => (
              <div key={player.id} className="voter-item">
                <span className="voter-name">
                  {player.name}
                  {player.id === votingInfo.targetPlayerId && ' üéØ'}
                </span>
                <span className="voter-status">
                  {player.id === votingInfo.targetPlayerId ? 'üéØ –ù–ê –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï' : 'üó≥Ô∏è –ì–û–õ–û–°–£–ï–¢'}
                </span>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default VotingInterface;