import React, { useState, useEffect } from 'react';
import './Admin.css';

const AdminPanel = ({ socket, roomId }) => {
  const [gameData, setGameData] = useState(null);
  const [players, setPlayers] = useState([]);
  const [activeEvents, setActiveEvents] = useState([]);
  const [bunkerResources, setBunkerResources] = useState(null);
  const [selectedPlayer, setSelectedPlayer] = useState(null);
  const [eventToTrigger, setEventToTrigger] = useState('');

  useEffect(() => {
    if (!socket || !roomId) return;

    // –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    socket.emit('requestAdminData', roomId);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    socket.on('adminGameData', (data) => {
      setGameData(data.gameData);
      setPlayers(data.players);
      setActiveEvents(data.activeEvents || []);
      setBunkerResources(data.bunkerResources);
    });

    socket.on('adminUpdate', (data) => {
      if (data.players) setPlayers(data.players);
      if (data.activeEvents) setActiveEvents(data.activeEvents);
      if (data.bunkerResources) setBunkerResources(data.bunkerResources);
    });

    return () => {
      socket.off('adminGameData');
      socket.off('adminUpdate');
    };
  }, [socket, roomId]);

  const triggerEvent = (eventId) => {
    socket.emit('triggerEvent', { roomId, eventId });
  };

  const forceRevealCard = (playerId, cardType) => {
    socket.emit('forceRevealCard', { roomId, playerId, cardType });
  };

  const modifyResource = (resourceType, amount) => {
    socket.emit('modifyResource', { roomId, resourceType, amount });
  };

  const eliminatePlayer = (playerId) => {
    socket.emit('adminEliminatePlayer', { roomId, playerId });
  };

  const pauseGame = () => {
    socket.emit('pauseGame', roomId);
  };

  const resumeGame = () => {
    socket.emit('resumeGame', roomId);
  };

  if (!gameData) {
    return (
      <div className="admin-panel">
        <div className="loading">
          <h2>üîç –ó–ê–ì–†–£–ó–ö–ê –ü–ê–ù–ï–õ–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø...</h2>
        </div>
      </div>
    );
  }

  return (
    <div className="admin-panel">
      <div className="admin-header">
        <h1>üéÆ –ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ë–£–ù–ö–ï–†–û–ú</h1>
        <div className="admin-controls">
          <button className="btn btn-secondary" onClick={pauseGame}>
            ‚è∏Ô∏è –ü–ê–£–ó–ê
          </button>
          <button className="btn btn-primary" onClick={resumeGame}>
            ‚ñ∂Ô∏è –ü–†–û–î–û–õ–ñ–ò–¢–¨
          </button>
        </div>
      </div>

      <div className="admin-content">
        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–µ */}
        <div className="admin-section game-info-section">
          <h3>üìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –ò–ì–†–ï</h3>
          <div className="game-stats">
            <div className="stat-item">
              <span className="stat-label">–°—Ü–µ–Ω–∞—Ä–∏–π:</span>
              <span className="stat-value">{gameData.scenario?.title}</span>
            </div>
            <div className="stat-item">
              <span className="stat-label">–°–æ—Å—Ç–æ—è–Ω–∏–µ:</span>
              <span className="stat-value">{gameData.gameState}</span>
            </div>
            <div className="stat-item">
              <span className="stat-label">–†–∞—É–Ω–¥:</span>
              <span className="stat-value">{gameData.currentRound}</span>
            </div>
            <div className="stat-item">
              <span className="stat-label">–ñ–∏–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤:</span>
              <span className="stat-value">{players.filter(p => p.isAlive).length}</span>
            </div>
          </div>
        </div>

        {/* –†–µ—Å—É—Ä—Å—ã –±—É–Ω–∫–µ—Ä–∞ */}
        {bunkerResources && (
          <div className="admin-section resources-section">
            <h3>üè≠ –†–ï–°–£–†–°–´ –ë–£–ù–ö–ï–†–ê</h3>
            <div className="resources-grid">
              {Object.entries(bunkerResources).map(([resourceType, resource]) => (
                <div key={resourceType} className="resource-item">
                  <div className="resource-header">
                    <span className="resource-name">{resourceType.toUpperCase()}</span>
                    <span className="resource-value">{Math.round(resource.current)}/{resource.max}</span>
                  </div>
                  <div className="resource-bar">
                    <div 
                      className="resource-fill"
                      style={{ 
                        width: `${(resource.current / resource.max) * 100}%`,
                        backgroundColor: resource.current < 30 ? 'var(--bunker-warning)' : 'var(--bunker-glow)'
                      }}
                    />
                  </div>
                  <div className="resource-controls">
                    <button 
                      className="btn btn-small btn-danger"
                      onClick={() => modifyResource(resourceType, -10)}
                    >
                      -10
                    </button>
                    <button 
                      className="btn btn-small btn-success"
                      onClick={() => modifyResource(resourceType, +10)}
                    >
                      +10
                    </button>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* –ò–≥—Ä–æ–∫–∏ */}
        <div className="admin-section players-section">
          <h3>üë• –£–ü–†–ê–í–õ–ï–ù–ò–ï –ò–ì–†–û–ö–ê–ú–ò</h3>
          <div className="players-admin-grid">
            {players.map((player) => (
              <div 
                key={player.id} 
                className={`player-admin-card ${!player.isAlive ? 'eliminated' : ''} ${selectedPlayer === player.id ? 'selected' : ''}`}
                onClick={() => setSelectedPlayer(selectedPlayer === player.id ? null : player.id)}
              >
                <div className="player-admin-header">
                  <span className="player-admin-name">
                    {player.name}
                    {player.isHost && ' üëë'}
                    {!player.isAlive && ' üíÄ'}
                  </span>
                  <button 
                    className="btn btn-small btn-danger"
                    onClick={(e) => {
                      e.stopPropagation();
                      eliminatePlayer(player.id);
                    }}
                  >
                    ‚ùå –ò–°–ö–õ–Æ–ß–ò–¢–¨
                  </button>
                </div>
                
                {player.character && (
                  <div className="player-character-overview">
                    <div className="character-traits">
                      {Object.entries(player.character).map(([trait, value]) => (
                        <div key={trait} className="trait-item">
                          <span className="trait-key">{trait}:</span>
                          <span className="trait-value">{value}</span>
                          <button 
                            className={`btn btn-tiny ${player.revealedCards?.includes(trait) ? 'btn-success' : 'btn-secondary'}`}
                            onClick={(e) => {
                              e.stopPropagation();
                              forceRevealCard(player.id, trait);
                            }}
                          >
                            {player.revealedCards?.includes(trait) ? 'üëÅÔ∏è' : 'üîí'}
                          </button>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            ))}
          </div>
        </div>

        {/* –°–æ–±—ã—Ç–∏—è */}
        <div className="admin-section events-section">
          <h3>‚ö° –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–û–ë–´–¢–ò–Ø–ú–ò</h3>
          
          {/* –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è */}
          {activeEvents.length > 0 && (
            <div className="active-events">
              <h4>üî• –ê–ö–¢–ò–í–ù–´–ï –°–û–ë–´–¢–ò–Ø:</h4>
              {activeEvents.map((event, index) => (
                <div key={index} className="active-event">
                  <h5>{event.title}</h5>
                  <p>{event.description}</p>
                  <small>–≠—Ñ—Ñ–µ–∫—Ç: {event.effect}</small>
                </div>
              ))}
            </div>
          )}

          {/* –¢—Ä–∏–≥–≥–µ—Ä —Å–æ–±—ã—Ç–∏–π */}
          <div className="event-controls">
            <h4>üé≤ –ó–ê–ü–£–°–¢–ò–¢–¨ –°–û–ë–´–¢–ò–ï:</h4>
            <div className="event-triggers">
              <button 
                className="btn btn-warning"
                onClick={() => triggerEvent('random')}
              >
                üé∞ –°–õ–£–ß–ê–ô–ù–û–ï –°–û–ë–´–¢–ò–ï
              </button>
              <button 
                className="btn btn-danger"
                onClick={() => triggerEvent('system_failure')}
              >
                ‚ö†Ô∏è –°–ë–û–ô –°–ò–°–¢–ï–ú
              </button>
              <button 
                className="btn btn-primary"
                onClick={() => triggerEvent('resource_discovery')}
              >
                üíé –ù–ê–•–û–î–ö–ê –†–ï–°–£–†–°–û–í
              </button>
              <button 
                className="btn btn-secondary"
                onClick={() => triggerEvent('social_conflict')}
              >
                ü§ù –°–û–¶–ò–ê–õ–¨–ù–´–ô –ö–û–ù–§–õ–ò–ö–¢
              </button>
            </div>
          </div>
        </div>

        {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
        <div className="admin-section quick-actions-section">
          <h3>‚ö° –ë–´–°–¢–†–´–ï –î–ï–ô–°–¢–í–ò–Ø</h3>
          <div className="quick-actions">
            <button 
              className="btn btn-warning"
              onClick={() => socket.emit('emergencyMeeting', roomId)}
            >
              üö® –≠–ö–°–¢–†–ï–ù–ù–û–ï –°–û–ë–†–ê–ù–ò–ï
            </button>
            <button 
              className="btn btn-danger"
              onClick={() => socket.emit('criticalEvent', roomId)}
            >
              üí• –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –°–û–ë–´–¢–ò–ï
            </button>
            <button 
              className="btn btn-success"
              onClick={() => socket.emit('resourceBonus', roomId)}
            >
              üéÅ –ë–û–ù–£–° –†–ï–°–£–†–°–û–í
            </button>
            <button 
              className="btn btn-secondary"
              onClick={() => socket.emit('revealAllCards', roomId)}
            >
              üëÅÔ∏è –ü–û–ö–ê–ó–ê–¢–¨ –í–°–ï –ö–ê–†–¢–´
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AdminPanel;