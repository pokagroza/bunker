import React, { useState } from 'react';
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  ScrollView,
  SafeAreaView,
  Alert,
  KeyboardAvoidingView,
  Platform,
} from 'react-native';
import { bunkerStyles, colors } from '../styles/bunkerStyles';
import { useSocket } from '../context/SocketContext';

const MainMenuScreen = ({ navigation }) => {
  const [playerName, setPlayerName] = useState('');
  const [roomId, setRoomId] = useState('');
  const [adminRoomId, setAdminRoomId] = useState('');
  const [showJoinForm, setShowJoinForm] = useState(false);
  const [showAdminForm, setShowAdminForm] = useState(false);
  const [loading, setLoading] = useState(false);

  const { socket, connected } = useSocket();

  const handleCreateRoom = () => {
    if (!connected) {
      Alert.alert('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è', '–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
      return;
    }

    if (!playerName.trim()) {
      Alert.alert('–û—à–∏–±–∫–∞', '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è');
      return;
    }

    setLoading(true);
    socket.emit('createRoom', playerName.trim());

    const handleRoomCreated = (data) => {
      setLoading(false);
      navigation.navigate('Lobby', { playerInfo: data });
    };

    const handleError = (message) => {
      setLoading(false);
      Alert.alert('–û—à–∏–±–∫–∞', message);
    };

    socket.once('roomCreated', handleRoomCreated);
    socket.once('error', handleError);
  };

  const handleJoinRoom = () => {
    if (!connected) {
      Alert.alert('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è', '–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
      return;
    }

    if (!playerName.trim() || !roomId.trim()) {
      Alert.alert('–û—à–∏–±–∫–∞', '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
      return;
    }

    setLoading(true);
    socket.emit('joinRoom', { 
      roomId: roomId.trim().toUpperCase(), 
      playerName: playerName.trim() 
    });

    const handleRoomJoined = (data) => {
      setLoading(false);
      navigation.navigate('Lobby', { playerInfo: data });
    };

    const handleError = (message) => {
      setLoading(false);
      Alert.alert('–û—à–∏–±–∫–∞', message);
    };

    socket.once('roomJoined', handleRoomJoined);
    socket.once('error', handleError);
  };

  const handleOpenAdmin = () => {
    if (!connected) {
      Alert.alert('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è', '–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
      return;
    }

    if (!adminRoomId.trim()) {
      Alert.alert('–û—à–∏–±–∫–∞', '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã');
      return;
    }

    navigation.navigate('Admin', { roomId: adminRoomId.trim().toUpperCase() });
  };

  const resetForms = () => {
    setShowJoinForm(false);
    setShowAdminForm(false);
  };

  const ConnectionIndicator = () => (
    <View style={[
      bunkerStyles.connectionStatus,
      connected && bunkerStyles.connectionStatusConnected
    ]} />
  );

  return (
    <SafeAreaView style={bunkerStyles.safeArea}>
      <ConnectionIndicator />
      <KeyboardAvoidingView 
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
        style={bunkerStyles.container}
      >
        <ScrollView 
          contentContainerStyle={bunkerStyles.scrollContainer}
          keyboardShouldPersistTaps="handled"
        >
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
          <View style={bunkerStyles.center}>
            <Text style={bunkerStyles.title}>üè† –ë–£–ù–ö–ï–† üè†</Text>
            <Text style={[bunkerStyles.text, { textAlign: 'center', marginBottom: 32 }]}>
              –ò–≥—Ä–∞ –Ω–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ
            </Text>
          </View>

          {/* –û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã */}
          <View style={bunkerStyles.panel}>
            <Text style={bunkerStyles.heading}>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ë—É–Ω–∫–µ—Ä!</Text>
            <Text style={bunkerStyles.text}>
              –ú–∏—Ä –ø–æ–≥–ª–æ—Ç–∏–ª–∞ –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞, –∏ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –±—É–Ω–∫–µ—Ä–µ. 
              –ù–æ –º–µ—Å—Ç–∞ —Ö–≤–∞—Ç–∏—Ç –Ω–µ –≤—Å–µ–º! –í–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç —É–±–µ–¥–∏—Ç—å –¥—Ä—É–≥–∏—Ö, 
              —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç–µ –º–µ—Å—Ç–æ –≤ —É–±–µ–∂–∏—â–µ.
            </Text>
            
            <View style={{ marginTop: 16 }}>
              <Text style={[bunkerStyles.textDim, { marginBottom: 4 }]}>
                üìù –ü–æ–ª—É—á–∏—Ç–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
              </Text>
              <Text style={[bunkerStyles.textDim, { marginBottom: 4 }]}>
                üé≠ –û—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ –æ–¥–Ω–æ–π
              </Text>
              <Text style={[bunkerStyles.textDim, { marginBottom: 4 }]}>
                üó£Ô∏è –£–±–µ–∂–¥–∞–π—Ç–µ –¥—Ä—É–≥–∏—Ö –≤ —Å–≤–æ–µ–π –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏
              </Text>
              <Text style={[bunkerStyles.textDim, { marginBottom: 4 }]}>
                üó≥Ô∏è –ì–æ–ª–æ—Å—É–π—Ç–µ –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤
              </Text>
              <Text style={[bunkerStyles.textDim, { marginBottom: 4 }]}>
                üèÜ –í—ã–∂–∏–≤–∏—Ç–µ –¥–æ –∫–æ–Ω—Ü–∞!
              </Text>
            </View>
          </View>

          {/* –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é */}
          {!showJoinForm && !showAdminForm ? (
            <View style={bunkerStyles.margin}>
              {/* –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã */}
              <View style={bunkerStyles.panel}>
                <Text style={bunkerStyles.subheading}>–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É</Text>
                <TextInput
                  style={bunkerStyles.input}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
                  placeholderTextColor={colors.bunkerTextDim}
                  value={playerName}
                  onChangeText={setPlayerName}
                  maxLength={20}
                  editable={!loading}
                />
                <TouchableOpacity
                  style={[
                    bunkerStyles.button,
                    bunkerStyles.buttonPrimary,
                    loading && bunkerStyles.buttonDisabled
                  ]}
                  onPress={handleCreateRoom}
                  disabled={loading}
                >
                  <Text style={[bunkerStyles.buttonText, bunkerStyles.buttonTextPrimary]}>
                    {loading ? '‚è≥ –°–û–ó–î–ê–ù–ò–ï...' : 'üè† –°–û–ó–î–ê–¢–¨ –ö–û–ú–ù–ê–¢–£'}
                  </Text>
                </TouchableOpacity>
              </View>

              {/* –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å */}
              <Text style={[bunkerStyles.text, { textAlign: 'center', marginVertical: 16 }]}>
                –∏–ª–∏
              </Text>

              {/* –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */}
              <View style={bunkerStyles.margin}>
                <TouchableOpacity
                  style={[bunkerStyles.button, bunkerStyles.buttonSecondary]}
                  onPress={() => setShowJoinForm(true)}
                >
                  <Text style={bunkerStyles.buttonText}>
                    üö™ –ü–†–ò–°–û–ï–î–ò–ù–ò–¢–¨–°–Ø –ö –ò–ì–†–ï
                  </Text>
                </TouchableOpacity>

                <TouchableOpacity
                  style={[bunkerStyles.button, bunkerStyles.buttonWarning]}
                  onPress={() => setShowAdminForm(true)}
                >
                  <Text style={[bunkerStyles.buttonText, bunkerStyles.buttonTextWarning]}>
                    ‚öôÔ∏è –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨
                  </Text>
                </TouchableOpacity>
              </View>
            </View>
          ) : showJoinForm ? (
            /* –§–æ—Ä–º–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è */
            <View style={bunkerStyles.margin}>
              <View style={bunkerStyles.panel}>
                <Text style={bunkerStyles.subheading}>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ</Text>
                <TextInput
                  style={bunkerStyles.input}
                  placeholder="–ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: ABC123)"
                  placeholderTextColor={colors.bunkerTextDim}
                  value={roomId}
                  onChangeText={(text) => setRoomId(text.toUpperCase())}
                  maxLength={6}
                  autoCapitalize="characters"
                  editable={!loading}
                />
                <TextInput
                  style={bunkerStyles.input}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
                  placeholderTextColor={colors.bunkerTextDim}
                  value={playerName}
                  onChangeText={setPlayerName}
                  maxLength={20}
                  editable={!loading}
                />
                <TouchableOpacity
                  style={[
                    bunkerStyles.button,
                    bunkerStyles.buttonPrimary,
                    loading && bunkerStyles.buttonDisabled
                  ]}
                  onPress={handleJoinRoom}
                  disabled={loading}
                >
                  <Text style={[bunkerStyles.buttonText, bunkerStyles.buttonTextPrimary]}>
                    {loading ? '‚è≥ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï...' : '‚û°Ô∏è –í–û–ô–¢–ò –í –ö–û–ú–ù–ê–¢–£'}
                  </Text>
                </TouchableOpacity>
              </View>

              <TouchableOpacity
                style={[bunkerStyles.button, bunkerStyles.buttonSecondary]}
                onPress={resetForms}
              >
                <Text style={bunkerStyles.buttonText}>‚¨ÖÔ∏è –ù–ê–ó–ê–î</Text>
              </TouchableOpacity>
            </View>
          ) : (
            /* –§–æ—Ä–º–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ */
            <View style={bunkerStyles.margin}>
              <View style={[bunkerStyles.panel, bunkerStyles.panelWarning]}>
                <Text style={[bunkerStyles.subheading, bunkerStyles.textWarning]}>
                  üîß –ü–ê–ù–ï–õ–¨ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê
                </Text>
                <Text style={bunkerStyles.textDim}>
                  –ü–∞–Ω–µ–ª—å –¥–ª—è –≤–µ–¥—É—â–∏—Ö –∏–≥—Ä—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
                </Text>
                <TextInput
                  style={bunkerStyles.input}
                  placeholder="–ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è"
                  placeholderTextColor={colors.bunkerTextDim}
                  value={adminRoomId}
                  onChangeText={(text) => setAdminRoomId(text.toUpperCase())}
                  maxLength={6}
                  autoCapitalize="characters"
                />
                <TouchableOpacity
                  style={[bunkerStyles.button, bunkerStyles.buttonWarning]}
                  onPress={handleOpenAdmin}
                >
                  <Text style={[bunkerStyles.buttonText, bunkerStyles.buttonTextWarning]}>
                    üîì –û–¢–ö–†–´–¢–¨ –ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø
                  </Text>
                </TouchableOpacity>
              </View>

              <TouchableOpacity
                style={[bunkerStyles.button, bunkerStyles.buttonSecondary]}
                onPress={resetForms}
              >
                <Text style={bunkerStyles.buttonText}>‚¨ÖÔ∏è –ù–ê–ó–ê–î</Text>
              </TouchableOpacity>
            </View>
          )}

          {/* –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
          {!connected && (
            <View style={[bunkerStyles.panel, bunkerStyles.panelDanger]}>
              <Text style={[bunkerStyles.text, bunkerStyles.textDanger, { textAlign: 'center' }]}>
                ‚ö†Ô∏è –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º
              </Text>
              <Text style={[bunkerStyles.textSmall, { textAlign: 'center', marginTop: 8 }]}>
                –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
              </Text>
            </View>
          )}
        </ScrollView>
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
};

export default MainMenuScreen;