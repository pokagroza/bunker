import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  ScrollView,
  SafeAreaView,
  Alert,
  FlatList,
} from 'react-native';
import { bunkerStyles, colors } from '../styles/bunkerStyles';
import { useSocket } from '../context/SocketContext';

const LobbyScreen = ({ navigation, route }) => {
  const [roomInfo, setRoomInfo] = useState(null);
  const [players, setPlayers] = useState([]);
  const [scenarios, setScenarios] = useState([]);
  const [selectedScenario, setSelectedScenario] = useState(null);
  const [loading, setLoading] = useState(false);

  const { socket, connected } = useSocket();
  const { playerInfo } = route.params;

  useEffect(() => {
    if (!connected || !socket) return;

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    socket.emit('getScenarios');

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    socket.on('scenarios', (scenarioList) => {
      setScenarios(scenarioList);
      if (scenarioList.length > 0) {
        setSelectedScenario(scenarioList[0]);
      }
    });

    socket.on('playersUpdate', (playerList) => {
      setPlayers(playerList);
    });

    socket.on('gameStarted', (data) => {
      setLoading(false);
      navigation.navigate('Game', { playerInfo, roomInfo: data });
    });

    socket.on('error', (message) => {
      setLoading(false);
      Alert.alert('–û—à–∏–±–∫–∞', message);
    });

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ
    socket.emit('getRoomInfo', playerInfo.roomId);

    socket.on('roomInfo', (info) => {
      setRoomInfo(info);
      setPlayers(info.players || []);
    });

    return () => {
      socket.off('scenarios');
      socket.off('playersUpdate');
      socket.off('gameStarted');
      socket.off('error');
      socket.off('roomInfo');
    };
  }, [socket, connected, playerInfo.roomId, navigation, playerInfo]);

  const handleStartGame = () => {
    if (!playerInfo.isHost) {
      Alert.alert('–û—à–∏–±–∫–∞', '–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–º–Ω–∞—Ç—ã –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É');
      return;
    }

    if (players.length < 2) {
      Alert.alert('–û—à–∏–±–∫–∞', '–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞');
      return;
    }

    if (!selectedScenario) {
      Alert.alert('–û—à–∏–±–∫–∞', '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –∏–≥—Ä—ã');
      return;
    }

    setLoading(true);
    socket.emit('startGame', { 
      roomId: playerInfo.roomId, 
      scenarioId: scenarios.indexOf(selectedScenario) 
    });
  };

  const handleBackToMenu = () => {
    Alert.alert(
      '–í—ã–π—Ç–∏ –∏–∑ –ª–æ–±–±–∏',
      '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É?',
      [
        { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' },
        { 
          text: '–í—ã–π—Ç–∏', 
          style: 'destructive',
          onPress: () => navigation.navigate('MainMenu')
        }
      ]
    );
  };

  const renderPlayer = ({ item }) => (
    <View style={bunkerStyles.listItem}>
      <View style={[bunkerStyles.row, bunkerStyles.spaceBetween]}>
        <Text style={bunkerStyles.text}>
          {item.name}
          {item.isHost && ' üëë'}
        </Text>
        <View style={[
          bunkerStyles.indicator,
          item.isAlive ? null : bunkerStyles.indicatorDanger
        ]} />
      </View>
    </View>
  );

  const renderScenario = ({ item, index }) => (
    <TouchableOpacity
      style={[
        bunkerStyles.listItem,
        selectedScenario === item && bunkerStyles.listItemActive,
        !playerInfo.isHost && bunkerStyles.buttonDisabled
      ]}
      onPress={() => playerInfo.isHost && setSelectedScenario(item)}
      disabled={!playerInfo.isHost}
    >
      <Text style={[
        bunkerStyles.subheading,
        selectedScenario === item && bunkerStyles.textGlow
      ]}>
        {item.title}
      </Text>
      <Text style={bunkerStyles.textDim}>
        {item.description}
      </Text>
      <Text style={[bunkerStyles.textSmall, { marginTop: 8 }]}>
        üè† –ë—É–Ω–∫–µ—Ä: {item.bunker.description}
      </Text>
    </TouchableOpacity>
  );

  return (
    <SafeAreaView style={bunkerStyles.safeArea}>
      <ScrollView contentContainerStyle={bunkerStyles.scrollContainer}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ª–æ–±–±–∏ */}
        <View style={bunkerStyles.panel}>
          <View style={[bunkerStyles.row, bunkerStyles.spaceBetween]}>
            <View>
              <Text style={bunkerStyles.heading}>–õ–æ–±–±–∏ –∏–≥—Ä—ã</Text>
              <Text style={bunkerStyles.textDim}>
                –ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã: {playerInfo.roomId}
              </Text>
            </View>
            <View style={[
              bunkerStyles.indicator,
              connected ? null : bunkerStyles.indicatorDanger
            ]} />
          </View>
        </View>

        {/* –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ */}
        <View style={bunkerStyles.panel}>
          <Text style={bunkerStyles.subheading}>
            –ò–≥—Ä–æ–∫–∏ ({players.length})
          </Text>
          <FlatList
            data={players}
            renderItem={renderPlayer}
            keyExtractor={(item) => item.id}
            scrollEnabled={false}
            ItemSeparatorComponent={() => <View style={{ height: 4 }} />}
          />
        </View>

        {/* –í—ã–±–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è */}
        <View style={bunkerStyles.panel}>
          <Text style={bunkerStyles.subheading}>
            –°—Ü–µ–Ω–∞—Ä–∏–π –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ—ã
            {!playerInfo.isHost && ' (—Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤—ã–±–∏—Ä–∞—Ç—å)'}
          </Text>
          <FlatList
            data={scenarios}
            renderItem={renderScenario}
            keyExtractor={(item, index) => index.toString()}
            scrollEnabled={false}
            ItemSeparatorComponent={() => <View style={{ height: 8 }} />}
          />
        </View>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ */}
        {selectedScenario && (
          <View style={[bunkerStyles.panel, bunkerStyles.panelWarning]}>
            <Text style={[bunkerStyles.subheading, bunkerStyles.textWarning]}>
              –î–µ—Ç–∞–ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è
            </Text>
            <Text style={bunkerStyles.text}>
              <Text style={bunkerStyles.textGlow}>–ö–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞:</Text> {selectedScenario.disaster}
            </Text>
            <Text style={bunkerStyles.text}>
              <Text style={bunkerStyles.textGlow}>–í—Ä–µ–º—è –≤—ã–∂–∏–≤–∞–Ω–∏—è:</Text> {selectedScenario.duration}
            </Text>
            <Text style={bunkerStyles.text}>
              <Text style={bunkerStyles.textGlow}>–£–≥—Ä–æ–∑—ã:</Text> {selectedScenario.threats.join(', ')}
            </Text>
            <Text style={bunkerStyles.text}>
              <Text style={bunkerStyles.textGlow}>–†–µ—Å—É—Ä—Å—ã:</Text> {selectedScenario.resources.join(', ')}
            </Text>
          </View>
        )}

        {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
        <View style={bunkerStyles.margin}>
          {playerInfo.isHost ? (
            <TouchableOpacity
              style={[
                bunkerStyles.button,
                bunkerStyles.buttonPrimary,
                (loading || players.length < 2) && bunkerStyles.buttonDisabled
              ]}
              onPress={handleStartGame}
              disabled={loading || players.length < 2}
            >
              <Text style={[bunkerStyles.buttonText, bunkerStyles.buttonTextPrimary]}>
                {loading ? '‚è≥ –ó–ê–ü–£–°–ö –ò–ì–†–´...' : 'üöÄ –ù–ê–ß–ê–¢–¨ –ò–ì–†–£'}
              </Text>
            </TouchableOpacity>
          ) : (
            <View style={[bunkerStyles.panel, bunkerStyles.panelGlow]}>
              <Text style={[bunkerStyles.text, { textAlign: 'center' }]}>
                ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã...
              </Text>
              <Text style={[bunkerStyles.textDim, { textAlign: 'center', marginTop: 8 }]}>
                –°–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–º–Ω–∞—Ç—ã –∑–∞–ø—É—Å—Ç–∏—Ç –∏–≥—Ä—É
              </Text>
            </View>
          )}

          <TouchableOpacity
            style={[bunkerStyles.button, bunkerStyles.buttonSecondary]}
            onPress={handleBackToMenu}
          >
            <Text style={bunkerStyles.buttonText}>
              ‚¨ÖÔ∏è –í–´–ô–¢–ò –ò–ó –õ–û–ë–ë–ò
            </Text>
          </TouchableOpacity>
        </View>

        {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ */}
        <View style={bunkerStyles.panel}>
          <Text style={bunkerStyles.subheading}>–ö–∞–∫ –∏–≥—Ä–∞—Ç—å</Text>
          <Text style={bunkerStyles.textDim}>
            1. –î–æ–∂–¥–∏—Ç–µ—Å—å, –ø–æ–∫–∞ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—Å—è –∫ –ª–æ–±–±–∏{'\n'}
            2. –°–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–º–Ω–∞—Ç—ã –≤—ã–±–∏—Ä–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ—ã{'\n'}
            3. –ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É" –¥–ª—è —Å—Ç–∞—Ä—Ç–∞{'\n'}
            4. –ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∏—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏{'\n'}
            5. –£–±–µ–∂–¥–∞–π—Ç–µ –¥—Ä—É–≥–∏—Ö –≤ —Å–≤–æ–µ–π –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏ –¥–ª—è –≤—ã–∂–∏–≤–∞–Ω–∏—è!
          </Text>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
};

export default LobbyScreen;